package org.jooq.mcve.test.java.oracle;

import org.jooq.DSLContext;
import org.jooq.Record2;
import org.jooq.SQLDialect;
import org.jooq.impl.DSL;
import org.jooq.mcve.java.oracle.tables.records.TestRecord;
import org.jooq.tools.JooqLogger;
import org.junit.*;
import org.testcontainers.containers.OracleContainer;
import org.testcontainers.containers.wait.strategy.HostPortWaitStrategy;
import org.testcontainers.containers.wait.strategy.LogMessageWaitStrategy;
import org.testcontainers.containers.wait.strategy.WaitAllStrategy;
import org.testcontainers.utility.DockerImageName;
import org.testcontainers.utility.ResourceReaper;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.Duration;

import static org.jooq.mcve.java.oracle.Tables.TEST;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

public class JavaTest {

    static JooqLogger      log = JooqLogger.getLogger(JavaTest.class);
    static OracleContainer db;
    static Connection      connection;
    static DSLContext      ctx;

    @BeforeClass
    public static void init() throws SQLException {
        if (System.getProperty("jooq.codegen.jdbc.url") == null) {
            db = new OracleContainer(DockerImageName.parse("gvenzl/oracle-xe:21.3.0")) {
                @Override
                public String getSid() {
                    return "XEPDB1";
                };

                @Override
                public String getDatabaseName() {
                    return "XEPDB1";
                };
            }
                .withUsername("MCVE")
                .withPassword("MCVE")
                .withEnv("ORACLE_PASSWORD", "MCVE")
                .withEnv("APP_USER", "MCVE")
                .withEnv("APP_USER_PASSWORD", "MCVE")
                .waitingFor(new WaitAllStrategy()
                    .withStrategy(new LogMessageWaitStrategy()
                        .withRegEx(".*DATABASE IS READY TO USE!.*"))
                    .withStrategy(new HostPortWaitStrategy())
                    .withStartupTimeout(Duration.ofMinutes(5))
                )
                .withInitScript("db/migration/init.sql");
            db.start();
            System.setProperty("jooq.codegen.jdbc.url", db.getJdbcUrl());
            System.setProperty("jooq.codegen.jdbc.username", db.getUsername());
            System.setProperty("jooq.codegen.jdbc.password", db.getPassword());
        }

        log.info("Connecting");
        connection = DriverManager.getConnection(
            System.getProperty("jooq.codegen.jdbc.url"),
            System.getProperty("jooq.codegen.jdbc.username"),
            System.getProperty("jooq.codegen.jdbc.password")
        );

        ctx = DSL.using(connection, SQLDialect.ORACLE);

        // Use JDBC directly instead of jOOQ to avoid DEBUG logging all of this
        try (Statement s = connection.createStatement()) {
            log.info("Finished setup");
        }
    }

    @AfterClass
    public static void end() {
        if (db != null) {
            ResourceReaper.instance().stopAndRemoveContainer(db.getContainerId(), db.getDockerImageName());
        }
    }

    @Before
    public void setup() throws Exception {
        ctx.delete(TEST).execute();
    }

    @After
    public void after() throws Exception {
    }

    @Test
    public void mcveTest() {
        Integer cd = Integer.valueOf(42);
        assertEquals(1,
            ctx.insertInto(TEST)
               .columns(TEST.CD)
               .values(cd)
               .execute()
        );

        Record2<TestRecord, Boolean> testRecordWithBoolean = ctx
                .select(TEST, DSL.field(TEST.CD.eq(cd)))
                .from(TEST)
                .where(TEST.CD.eq(cd))
                .fetchOne();
        assertNotNull(testRecordWithBoolean.value1().getId());

        TestRecord record = ctx.fetchOne(TEST, TEST.CD.eq(cd));
        assertNotNull(record.getId());
    }
}
