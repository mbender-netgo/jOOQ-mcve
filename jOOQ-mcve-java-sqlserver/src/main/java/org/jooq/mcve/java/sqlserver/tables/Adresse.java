/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.sqlserver.tables;


import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.sqlserver.Keys;
import org.jooq.mcve.java.sqlserver.Mcve;
import org.jooq.mcve.java.sqlserver.tables.Tp.TpPath;
import org.jooq.mcve.java.sqlserver.tables.records.AdresseRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Adresse extends TableImpl<AdresseRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>master.mcve.adresse</code>
     */
    public static final Adresse ADRESSE = new Adresse();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdresseRecord> getRecordType() {
        return AdresseRecord.class;
    }

    /**
     * The column <code>master.mcve.adresse.id</code>.
     */
    public final TableField<AdresseRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>master.mcve.adresse.strasse</code>.
     */
    public final TableField<AdresseRecord, String> STRASSE = createField(DSL.name("strasse"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>master.mcve.adresse.hausnummer</code>.
     */
    public final TableField<AdresseRecord, String> HAUSNUMMER = createField(DSL.name("hausnummer"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>master.mcve.adresse.plz</code>.
     */
    public final TableField<AdresseRecord, String> PLZ = createField(DSL.name("plz"), SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>master.mcve.adresse.ort</code>.
     */
    public final TableField<AdresseRecord, String> ORT = createField(DSL.name("ort"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>master.mcve.adresse.land</code>.
     */
    public final TableField<AdresseRecord, String> LAND = createField(DSL.name("land"), SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>master.mcve.adresse.postalische_ergaenzung</code>.
     */
    public final TableField<AdresseRecord, String> POSTALISCHE_ERGAENZUNG = createField(DSL.name("postalische_ergaenzung"), SQLDataType.VARCHAR(128), this, "");

    private Adresse(Name alias, Table<AdresseRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Adresse(Name alias, Table<AdresseRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>master.mcve.adresse</code> table reference
     */
    public Adresse(String alias) {
        this(DSL.name(alias), ADRESSE);
    }

    /**
     * Create an aliased <code>master.mcve.adresse</code> table reference
     */
    public Adresse(Name alias) {
        this(alias, ADRESSE);
    }

    /**
     * Create a <code>master.mcve.adresse</code> table reference
     */
    public Adresse() {
        this(DSL.name("adresse"), null);
    }

    public <O extends Record> Adresse(Table<O> path, ForeignKey<O, AdresseRecord> childPath, InverseForeignKey<O, AdresseRecord> parentPath) {
        super(path, childPath, parentPath, ADRESSE);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class AdressePath extends Adresse implements Path<AdresseRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> AdressePath(Table<O> path, ForeignKey<O, AdresseRecord> childPath, InverseForeignKey<O, AdresseRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private AdressePath(Name alias, Table<AdresseRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public AdressePath as(String alias) {
            return new AdressePath(DSL.name(alias), this);
        }

        @Override
        public AdressePath as(Name alias) {
            return new AdressePath(alias, this);
        }

        @Override
        public AdressePath as(Table<?> alias) {
            return new AdressePath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mcve.MCVE;
    }

    @Override
    public UniqueKey<AdresseRecord> getPrimaryKey() {
        return Keys.ADRESSE__PK_ADRESSE;
    }

    private transient TpPath _fkTp_Adresse1;

    /**
     * Get the implicit to-many join path to the <code>master.mcve.tp</code>
     * table, via the <code>fk_tp__adresse1</code> key
     */
    public TpPath fkTp_Adresse1() {
        if (_fkTp_Adresse1 == null)
            _fkTp_Adresse1 = new TpPath(this, null, Keys.FK_TP__ADRESSE1.getInverseKey());

        return _fkTp_Adresse1;
    }

    private transient TpPath _fkTp_Adresse2;

    /**
     * Get the implicit to-many join path to the <code>master.mcve.tp</code>
     * table, via the <code>fk_tp__adresse2</code> key
     */
    public TpPath fkTp_Adresse2() {
        if (_fkTp_Adresse2 == null)
            _fkTp_Adresse2 = new TpPath(this, null, Keys.FK_TP__ADRESSE2.getInverseKey());

        return _fkTp_Adresse2;
    }

    @Override
    public Adresse as(String alias) {
        return new Adresse(DSL.name(alias), this);
    }

    @Override
    public Adresse as(Name alias) {
        return new Adresse(alias, this);
    }

    @Override
    public Adresse as(Table<?> alias) {
        return new Adresse(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Adresse rename(String name) {
        return new Adresse(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Adresse rename(Name name) {
        return new Adresse(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Adresse rename(Table<?> name) {
        return new Adresse(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Adresse where(Condition condition) {
        return new Adresse(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Adresse where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Adresse where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Adresse where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Adresse where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Adresse where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Adresse where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Adresse where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Adresse whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Adresse whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
