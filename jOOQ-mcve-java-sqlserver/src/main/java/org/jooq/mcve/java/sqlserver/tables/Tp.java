/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.sqlserver.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.sqlserver.Keys;
import org.jooq.mcve.java.sqlserver.Mcve;
import org.jooq.mcve.java.sqlserver.tables.Adresse.AdressePath;
import org.jooq.mcve.java.sqlserver.tables.records.TpRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Tp extends TableImpl<TpRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>master.mcve.tp</code>
     */
    public static final Tp TP = new Tp();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TpRecord> getRecordType() {
        return TpRecord.class;
    }

    /**
     * The column <code>master.mcve.tp.id</code>.
     */
    public final TableField<TpRecord, String> ID = createField(DSL.name("id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>master.mcve.tp.name</code>.
     */
    public final TableField<TpRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>master.mcve.tp.adresse1_id</code>.
     */
    public final TableField<TpRecord, String> ADRESSE1_ID = createField(DSL.name("adresse1_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    /**
     * The column <code>master.mcve.tp.adresse2_id</code>.
     */
    public final TableField<TpRecord, String> ADRESSE2_ID = createField(DSL.name("adresse2_id"), SQLDataType.VARCHAR(36).nullable(false), this, "");

    private Tp(Name alias, Table<TpRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Tp(Name alias, Table<TpRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>master.mcve.tp</code> table reference
     */
    public Tp(String alias) {
        this(DSL.name(alias), TP);
    }

    /**
     * Create an aliased <code>master.mcve.tp</code> table reference
     */
    public Tp(Name alias) {
        this(alias, TP);
    }

    /**
     * Create a <code>master.mcve.tp</code> table reference
     */
    public Tp() {
        this(DSL.name("tp"), null);
    }

    public <O extends Record> Tp(Table<O> path, ForeignKey<O, TpRecord> childPath, InverseForeignKey<O, TpRecord> parentPath) {
        super(path, childPath, parentPath, TP);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class TpPath extends Tp implements Path<TpRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> TpPath(Table<O> path, ForeignKey<O, TpRecord> childPath, InverseForeignKey<O, TpRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private TpPath(Name alias, Table<TpRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public TpPath as(String alias) {
            return new TpPath(DSL.name(alias), this);
        }

        @Override
        public TpPath as(Name alias) {
            return new TpPath(alias, this);
        }

        @Override
        public TpPath as(Table<?> alias) {
            return new TpPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mcve.MCVE;
    }

    @Override
    public UniqueKey<TpRecord> getPrimaryKey() {
        return Keys.TP__PK_TP;
    }

    @Override
    public List<ForeignKey<TpRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_TP__ADRESSE1, Keys.FK_TP__ADRESSE2);
    }

    private transient AdressePath _fkTp_Adresse1;

    /**
     * Get the implicit join path to the <code>master.mcve.adresse</code> table,
     * via the <code>fk_tp__adresse1</code> key.
     */
    public AdressePath fkTp_Adresse1() {
        if (_fkTp_Adresse1 == null)
            _fkTp_Adresse1 = new AdressePath(this, Keys.FK_TP__ADRESSE1, null);

        return _fkTp_Adresse1;
    }

    private transient AdressePath _fkTp_Adresse2;

    /**
     * Get the implicit join path to the <code>master.mcve.adresse</code> table,
     * via the <code>fk_tp__adresse2</code> key.
     */
    public AdressePath fkTp_Adresse2() {
        if (_fkTp_Adresse2 == null)
            _fkTp_Adresse2 = new AdressePath(this, Keys.FK_TP__ADRESSE2, null);

        return _fkTp_Adresse2;
    }

    @Override
    public Tp as(String alias) {
        return new Tp(DSL.name(alias), this);
    }

    @Override
    public Tp as(Name alias) {
        return new Tp(alias, this);
    }

    @Override
    public Tp as(Table<?> alias) {
        return new Tp(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Tp rename(String name) {
        return new Tp(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tp rename(Name name) {
        return new Tp(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Tp rename(Table<?> name) {
        return new Tp(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tp where(Condition condition) {
        return new Tp(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tp where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tp where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tp where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tp where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tp where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tp where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Tp where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tp whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Tp whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
