package org.jooq.mcve.test.java.sqlserver;

import static org.jooq.mcve.java.sqlserver.Tables.ADRESSE;
import static org.jooq.mcve.java.sqlserver.Tables.TP;
import static org.jooq.mcve.test.java.sqlserver.AdresseQueryHelper.adresseDtoAsSelectField;

import org.jooq.DSLContext;
import org.jooq.SQLDialect;
import org.jooq.impl.DSL;
import org.jooq.tools.JooqLogger;
import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.testcontainers.containers.MSSQLServerContainer;
import org.testcontainers.utility.ResourceReaper;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;

public class JavaTest {

    static JooqLogger              log = JooqLogger.getLogger(JavaTest.class);
    static MSSQLServerContainer<?> db;
    static Connection              connection;
    static DSLContext              ctx;

    @BeforeClass
    public static void init() throws SQLException {
        if (System.getProperty("jooq.codegen.jdbc.url") == null) {
            db = new MSSQLServerContainer<>("mcr.microsoft.com/mssql/server:2022-CU15-ubuntu-22.04")
                    .acceptLicense()
                    .withPassword("Test1234")
                    .withEnv("MSSQL_PID", "Express")
                    .withUrlParam("encrypt", "true")
                    .withUrlParam("trustServerCertificate", "true")
                    .withInitScript("db/migration/init.sql");
            db.start();
            System.setProperty("jooq.codegen.jdbc.url", db.getJdbcUrl());
            System.setProperty("jooq.codegen.jdbc.username", db.getUsername());
            System.setProperty("jooq.codegen.jdbc.password", db.getPassword());
        }

        log.info("Connecting");
        connection = DriverManager.getConnection(
            System.getProperty("jooq.codegen.jdbc.url"),
            System.getProperty("jooq.codegen.jdbc.username"),
            System.getProperty("jooq.codegen.jdbc.password")
        );

        ctx = DSL.using(connection, SQLDialect.SQLSERVER);

        // Use JDBC directly instead of jOOQ to avoid DEBUG logging all of this
        try (Statement s = connection.createStatement()) {
            log.info("Finished setup");
        }
    }

    @AfterClass
    public static void end() {
        if (db != null) {
            ResourceReaper.instance().stopAndRemoveContainer(db.getContainerId(), db.getDockerImageName());
        }
    }

    @Before
    public void setup() throws Exception {
        ctx.delete(TP).execute();
        ctx.delete(ADRESSE).execute();
    }

    @After
    public void after() throws Exception {
    }

    @Test
    public void mcveTest() {

        String adresse1Id = "0198ec1f-84f4-7bf0-861a-3913f1999615";
        String adresse2Id = "0198ec1f-84e4-7a40-848e-a15ac1eca407";
        ctx.insertInto(ADRESSE)
                .columns(ADRESSE.ID, ADRESSE.STRASSE, ADRESSE.HAUSNUMMER, ADRESSE.PLZ, ADRESSE.ORT)
                .values(adresse1Id, "Musterstraße", "1", "12345", "Musterstadt")
                .values(adresse2Id, "Beispielstraße", "2", "54321", "Beispielstadt")
                .execute();

        String tppId = "0198ec1f-84fb-7315-b2ee-dd96e363c9c8";
        ctx.insertInto(TP)
                .columns(TP.ID, TP.ADRESSE1_ID, TP.ADRESSE2_ID)
                .values(tppId, adresse1Id, adresse2Id)
                .execute();

        ctx.select(
                        TP.ID,
                        adresseDtoAsSelectField(TP.ADRESSE1_ID.eq(ADRESSE.ID)),
                        adresseDtoAsSelectField(TP.ADRESSE2_ID.eq(ADRESSE.ID)))
                .from(TP)
                .where(TP.ID.eq(tppId))
                .fetchOptional();
    }
}
